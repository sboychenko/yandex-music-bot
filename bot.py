import os
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from yandex_music import Client

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# List of allowed user IDs from .env
ALLOWED_USERS = [int(id.strip()) for id in os.getenv('ALLOWED_USERS', '').split(',') if id.strip()]
ADMIN_ID = os.getenv('ADMIN_ID')

def is_user_allowed(user_id: int) -> bool:
    """Check if user is allowed to use the bot."""
    return len(ALLOWED_USERS) == 0 or user_id in ALLOWED_USERS

# Initialize Yandex Music client
yandex_client_with_token = Client(token=os.getenv('YANDEX_MUSIC_TOKEN')).init()
yandex_client_empty = Client().init()
#logger.info(os.getenv('TELEGRAM_BOT_TOKEN'))

async def send_admin_notification(application: Application, message: str):
    """Send notification to admin."""
    if not ADMIN_ID:
        return
    
    try:
        await application.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏.\n'
        '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫.'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user.id != int(ADMIN_ID):
        await send_admin_notification(
            context.application,
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:\n"
            f"ID: {user.id}\n"
            f"–ò–º—è: {user.first_name}\n"
            f"Username: @{user.username if user.username else '–ù–µ—Ç'}"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏.\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        '/myid - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ.\n\n'
        '–ê–≤—Ç–æ—Ä: @sboychenko_life'
    )

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send user's Telegram ID."""
    user = update.effective_user
    await update.message.reply_text(
        f'–í–∞—à Telegram ID: `{user.id}`\n\n'
        '–≠—Ç–æ—Ç ID –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram.',
        parse_mode='Markdown'
    )

async def search_tracks(clinet: Client, query: str, limit: int = 6):
    """Search for tracks in Yandex Music."""
    try:
        search_result = clinet.search(query, type_='track')
        if not search_result.tracks:
            return None
        
        tracks = []
        for track in search_result.tracks.results[:limit]:
            track_info = {
                'id': track.id,
                'title': track.title,
                'artists': ', '.join(artist.name for artist in track.artists),
                'duration': track.duration_ms // 1000,
                'album': track.albums[0].title if track.albums else 'Unknown Album'
            }
            tracks.append(track_info)
        return tracks
    except Exception as e:
        logger.error(f"Error searching tracks: {e}")
        return None

async def process_track(client: Client, track_id: str, message):
    """Process track download and sending."""
    try:
        # Get track info
        track = client.tracks(track_id)[0]
        artists = ', '.join(artist.name for artist in track.artists)
        album = track.albums[0].title if track.albums else 'Unknown Album'
        
        # Get download info
        download_info = track.get_download_info()
        if not download_info:
            await message.reply_text("‚ùå –¢—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return
        
        # Get the best available quality
        best_quality = None
        for info in download_info:
            if info.codec == 'mp3':
                if not best_quality or info.bitrate_in_kbps > best_quality.bitrate_in_kbps:
                    best_quality = info
        
        if not best_quality:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è —Ç—Ä–µ–∫–∞")
            return
        
        # Download track
        filename = f"{track_id}.mp3"
        try:
            track.download(
                filename,
                codec=best_quality.codec,
                bitrate_in_kbps=best_quality.bitrate_in_kbps
            )
            
            # Send audio file with retries
            max_retries = 3
            retry_delay = 2  # seconds
            
            for attempt in range(max_retries):
                try:
                    with open(filename, 'rb') as audio:
                        await message.reply_audio(
                            audio=audio,
                            title=track.title,
                            performer=artists,
                            caption=f"üéµ {track.title}\nüë§ {artists}",
                            read_timeout=30,
                            write_timeout=30,
                            connect_timeout=30,
                            pool_timeout=30
                        )
                    break  # If successful, break the retry loop
                except Exception as e:
                    if attempt < max_retries - 1:  # If not the last attempt
                        logger.warning(f"Attempt {attempt + 1} failed: {e}. Retrying in {retry_delay} seconds...")
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2  # Exponential backoff
                    else:
                        raise  # Re-raise the last exception if all attempts failed
            
            # Clean up
            os.remove(filename)
            
        except Exception as e:
            logger.error(f"Error during download/send: {e}")
            await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞")
            if os.path.exists(filename):
                os.remove(filename)
                
    except Exception as e:
        logger.error(f"Error processing track: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle incoming messages."""
    text = update.message.text
    
    # Allow /myid command for all users
    if text == '/myid':
        await myid_command(update, context)
        return 
    
    # Check access for other commands and messages
    yandex_client = yandex_client_empty if not is_user_allowed(update.effective_user.id) else yandex_client_with_token
    
    if 'music.yandex' in text:
        # Handle Yandex Music URL
        await update.message.reply_text("üéµ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        
        try:
            # Remove query parameters from URL
            text = text.split('?')[0]
            
            # Extract track ID from URL
            if '/track/' in text:
                track_id = text.split('/track/')[1].split('/')[0]
            elif '/album/' in text:
                track_id = text.split('/track/')[1].split('/')[0]
            else:
                await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")
                return

            await process_track(yandex_client, track_id, update.message)
                    
        except Exception as e:
            logger.error(f"Error processing URL: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É")
            
    else:
        # Handle search query
        await update.message.reply_text(f"üîç –ò—â—É —Ç—Ä–µ–∫: {text}")
        
        tracks = await search_tracks(yandex_client, text)
        if not tracks:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
            )
            return
        
        # Create inline keyboard with search results
        keyboard = []
        for track in tracks:
            callback_data = f"track_{track['id']}"
            duration_min = track['duration'] // 60
            duration_sec = track['duration'] % 60
            button_text = f"{track['title']} - {track['artists']} ({duration_min}:{duration_sec:02d})"
            if len(button_text) > 64:
                button_text = button_text[:61] + "..."
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéµ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle callback queries from inline keyboard."""
    query = update.callback_query
    await query.answer()

    # Check access for other commands and messages
    yandex_client = yandex_client_empty if not is_user_allowed(query.from_user.id) else yandex_client_with_token
    
    if not is_user_allowed(query.from_user.id):
        await query.message.reply_text(
            "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ, —Ç—Ä–µ–∫–∏ –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–º 30—Å–µ–∫ –≤–∏–¥–µ."
        )
    
    if query.data.startswith('track_'):
        track_id = query.data.split('_')[1]
        await query.message.reply_text("üéµ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        await process_track(yandex_client, track_id, query.message)

async def main():
    """Start the bot."""
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("myid", myid_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    await send_admin_notification(application, "üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    # Start the Bot
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        import nest_asyncio
        nest_asyncio.apply()
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("Bot stopped by user")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        try:
            loop.close()
        except Exception as e:
            print(f"Error closing loop: {e}") 